apiVersion: v1
kind: Service
metadata:
  name: go-mod-image
  labels:
    app: go-mod-image
spec:
  ports:
  - port: 8080
    protocol: TCP
  clusterIP: None
  selector:
    app: go-mod-image
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-mod-image
  labels:
    app: go-mod-image
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-mod-image
  template:
    metadata:
      labels:
        app: go-mod-image
    spec:
      containers:
      - name: go-mod-image
        image: go-mod-image
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
 selector:
   matchLabels:
     app: redis
 template:
  metadata:
     name: redis
     labels:
       app: redis
  spec:
    containers:
    - name: redis
      image: redis:5.0.4
      command:
        - redis-server
      env:
      - name: MASTER
        value: "true"
      ports:
      - containerPort: 6379
      resources:
        limits:
          cpu: "0.3"
      volumeMounts:
      - mountPath: /redis-master-data
        name: data
    volumes:
      - name: data
        emptyDir: {}
---
kind: Service
apiVersion: v1
metadata:
  name: redis
spec:
  ports:
    - name: redis
      port: 6379
      protocol: TCP
  selector:
    app: redis
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: info-getter
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["pods"]
    verbs: ["get"]
  - apiGroups: ["redis.cnrm.cloud.google.com"]
    resources: ["redisinstances"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: get-info
  namespace: default
subjects:
  # You can specify more than one "subject"
  - kind: ServiceAccount
    name: default # "name" is case sensitive
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: info-getter # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
